# Events List:
# ------------
# LogNewCollectiveInitialized(string[] name, address[] tokens, uint128[] price, address[] users, uint256[] amounts, uint32 collectiveInfo.cliff, uint32 collectiveInfo.vestimTime);
# LogNewAdmin(address newAdmin);
# LogNewPoolInitialized(uint256);
# LogTokensStaked(address user, uint256 amount);
# LogTokensUnstaked(address user, uint256 unstakedAmount, address[] tokens, uint256[] claim)
# LogTokensClaimed(address user, address[] tokens, uint256[] claim)

# Entities

type User @entity {
  id: ID! # userAddress
  collectivesOwner: [Collective!] @derivedFrom(field: "ownerAddress")
  collectivesParticipant: [CollectiveParticipant!] @derivedFrom(field: "participantAddress")
}

type Collective @entity {
  id: ID! # collectiveAddress
  ownerAddress: User! # FK to User on collectivesOwner[]
  participants: [CollectiveParticipant!] @derivedFrom(field: "collectiveAddress")
  creation_date: Int!
  cliff: Int!
  vesting_time: Int!
  started: Boolean!
  started_date: Int!
}

type CollectiveParticipant @entity {
  id: ID! # collectiveAddress-participantAddress
  index: Int!
  participantClaims: [CollectiveParticipantClaim!] @derivedFrom(field: "collectiveParticipant")
  collectiveAddress: Collective!  # FK to Collective on participants[]
  participantAddress: User! # FK to User on collectivesParticipant[]
  name: String!
  tokenAddress: Bytes!
  amount: BigDecimal!
  price: BigDecimal!
  stakedAmount: BigDecimal!
  depositedShare: BigDecimal!
  lastCheckpointTWAP: Int!
  lastCheckpointTime: Int!
  lastCheckpointPercentageVested: BigDecimal!
}

type CollectiveParticipantClaim @entity {
  id: ID! # collectiveAddress-participantAddress-tokenAddress
  collectiveParticipant: CollectiveParticipant!
  tokenAddress: Bytes!
  claimAmount: BigDecimal!
}
